package com.maknc.valentine;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import com.google.analytics.tracking.android.EasyTracker;
import com.google.analytics.tracking.android.Tracker;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.NavUtils;
import android.support.v7.app.ActionBarActivity;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

public class CreateActivity extends ActionBarActivity implements
		ImagePickerFragment.NoticeDialogListener,
		TextPickerFragment.NoticeTextDialogListener {
	
	// Different background size for text longer then parameter
	public static final int MAX_TEXT_LENGTH = 100; 
	private static final int TEXT_SIZE = 26; 
	private static final int JPEG_COMPRESSION = 80; 
	private static final String EXPORT_FILE_NAME = "MyValentine.jpg";
	
	Bitmap combined = null;
	EditText mEditText;
	ImageView mImageView;
	Drawable currentSelectedImageBg;
	Drawable currentImageBg;
	
	// Google Analytics
	private Tracker myTracker; 

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_create);
		// Show the Up button in the action bar.
		setupActionBar();

		mEditText = (EditText) findViewById(R.id.etCustomText);

		mImageView = (ImageView) findViewById(R.id.imCreateValBg);
		mImageView.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {

				DialogFragment newFragment = new ImagePickerFragment();
				newFragment.show(getSupportFragmentManager(),
						"tag_dialog_image");

			}
		});

		Button btnPreview = (Button) findViewById(R.id.btnPreview);
		btnPreview.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {

				String inputText = mEditText.getText().toString();

				// Check for clear previous preview result
				if (currentSelectedImageBg != null) {
					currentImageBg = currentSelectedImageBg;
				} else {
					// Get image from ImageView
					// currentImageBg = mImageView.getDrawable();

					// Set default
					Drawable defaultDrawable = getResources().getDrawable(R.drawable.frame00);
					currentImageBg = defaultDrawable;
				}

				if (MyConfig.DEBUG_MODE) {
					Log.i("ONCLICK", "currentImageBg 1: " + currentImageBg);
					Log.i("ONCLICK", "currentImageBg 2: " + R.drawable.bg_fav);
				}

				combined = drawTextToBitmap(getApplicationContext(),
						currentImageBg, inputText);

				if (combined != null) {
					mImageView.setImageBitmap(combined);
					Toast.makeText(getApplicationContext(), getString(R.string.toast_text_added),
							Toast.LENGTH_SHORT).show();
				} else {
					Toast.makeText(getApplicationContext(), getString(R.string.toast_error),
							Toast.LENGTH_SHORT).show();
				}
			}

		});

		Button btnShare = (Button) findViewById(R.id.btnShareSelfmade);
		btnShare.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {

				Bitmap imageToSend = combined;

				Intent shareIntent = new Intent(Intent.ACTION_SEND);
				shareIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
				shareIntent.setType("image/jpeg");
				
				Uri uri = Uri.fromFile(createExternalStoragePublicPicture(imageToSend));
				
				shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
				shareIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
	
				startActivity(Intent.createChooser(shareIntent, "Share Image"));

			}

		});

		Button btnPasteText = (Button) findViewById(R.id.btnPasteText);
		btnPasteText.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {

				DialogFragment newFragment = new TextPickerFragment();
				newFragment
						.show(getSupportFragmentManager(), "tag_dialog_text");

			}

		});

	}
	
	/*
	 * Don't forget declare in manifest activity 
	 * android:configChanges="orientation|screenSize"
	 */
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
	    super.onConfigurationChanged(newConfig);

	    if (combined != null && mImageView != null) {
			mImageView.setImageBitmap(combined);
		}
	}

	
	@Override
	public void onStart() {
		super.onStart();
		// The rest of your onStart() code.
		EasyTracker.getInstance().activityStart(this); // Add this method.
		// Get a reference to tracker.
		myTracker = EasyTracker.getTracker(); 
		myTracker.sendView("Create Screen");
	}

	@Override
	public void onStop() {
		super.onStop();
		// The rest of your onStop() code.
		EasyTracker.getInstance().activityStop(this); // Add this method.
	}
	

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.create, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			return true;

		case R.id.menu_item_reset:
			mEditText.setText(getText(R.string.text_selfmade_default));

			Drawable defaultDrawable = getResources().getDrawable(R.drawable.frame00);
			currentSelectedImageBg = defaultDrawable;
			mImageView.setImageDrawable(defaultDrawable);

			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onFinishImageDialog(int selectedImage) {
		Drawable d = getResources().getDrawable(selectedImage);

		// Save selection result for clear preview
		currentSelectedImageBg = d;

		if (mImageView != null) {
			mImageView.setImageDrawable(d);
		} else {
			mImageView = (ImageView) findViewById(R.id.imCreateValBg);
			mImageView.setImageDrawable(d);
		}
	}

	@Override
	public void onFinishTextDialog(String selectedText) {
		if (selectedText != null) {
			mEditText.setText(selectedText);
		}
	}

	/**
	 * Draw text to image (version for Drawable input type - resId)
	 * 
	 * @param context
	 * @param resId - image for draw text on
	 * @param text - text for drawing
	 * @return
	 */
	private Bitmap drawTextToBitmap(Context context, Drawable resId, String text) {
		try {
			Resources resources = context.getResources();
			// TODO review scale
			float scale = resources.getDisplayMetrics().density;
			Bitmap bitmap = drawableToBitmap(resId);
			android.graphics.Bitmap.Config bitmapConfig = bitmap.getConfig();
			// set default bitmap config if none
			if (bitmapConfig == null) {
			}
			
			// resource bitmaps are imutable,
			// so we need to convert it to mutable one
			bitmap = bitmap.copy(bitmapConfig, true);
			
			Canvas canvas = null;
			// Text left position [ ->[<- Text ] ]
			float textPositionX = 0.5f;
			
			// Text top position
			float textPositionY = 0.5f;
			
			// Text region width relative to the entire width [ [<- Text ->] ]
			float textRegionWidthScale = 0.75f;
			
			int textColor = Color.WHITE;

			/*
			 * Set different backgrounds according to text size
			 */
			if (text.length() > MAX_TEXT_LENGTH) {
				int coverWidth = bitmap.getWidth() * 2;
				int coverHeight = bitmap.getHeight() * 2;
				
				Bitmap.Config blankConf = Bitmap.Config.ARGB_8888; 
				// Creates a MUTABLE bitmap
				Bitmap blankBmp = Bitmap.createBitmap(coverWidth, coverHeight, blankConf);
				Canvas blankCanvas = new Canvas(blankBmp);
				blankCanvas.drawColor(Color.WHITE);
				// Override loaded with adding blank background
				bitmap = overlay(blankBmp, bitmap);
				canvas = new Canvas(bitmap);
				//canvas.drawColor(Color.BLUE);
				
				textPositionX = 0.9f;
				textPositionY = 0.5f;
				textRegionWidthScale = 0.40f;
				textColor = Color.parseColor(getString(R.color.text_in_valentine));
				
			} else {
				canvas = new Canvas(bitmap);
				textPositionX = 0.5f;
				textPositionY = 0.4f;
				textRegionWidthScale = 0.75f;
				
			}
		

			// Set text properties: color, .. , etc
			TextPaint mTextPaint = new TextPaint();
			mTextPaint.setColor(textColor);
			mTextPaint.setTextSize(TEXT_SIZE * scale);
			
			Typeface typeFace = Typeface.createFromAsset(context.getAssets(),
					"fonts/MarckScript-Regular.ttf");		
			mTextPaint.setTypeface(typeFace);

			// Text region width relative to the entire width [ [<- 0.75 ->] ]
			int textRectWidth = (int) (canvas.getWidth() * textRegionWidthScale);
			
			// Set rectangular layout for text with line breaks
			StaticLayout mTextLayout = new StaticLayout(text, mTextPaint,
					textRectWidth, Alignment.ALIGN_NORMAL, 1.0f, 0.0f,
					false);

			canvas.save();
			
			// calculate x and y position where your text will be placed
			int textX = (int) ((canvas.getWidth() - mTextLayout.getWidth()) * textPositionX);
			int textY = (int) ((canvas.getHeight() - mTextLayout.getHeight()) * textPositionY);

			if (MyConfig.DEBUG_MODE) {
				Log.i("PAINT", "text.length(): " + text.length());
				Log.i("PAINT", "mTextLayout.getWidth(): " + mTextLayout.getWidth());
				Log.i("PAINT", "canvas.getWidth(): " + canvas.getWidth());
				Log.i("PAINT", "canvas.getHeight(): " + canvas.getHeight());
				Log.i("PAINT", "textX: " + textX);
				Log.i("PAINT", "textY: " + textY);
			}

			canvas.translate(textX, textY);
			mTextLayout.draw(canvas);
			canvas.restore();

			// canvas.drawText(text, x * scale, y * scale, paint);
			// canvas.drawText(text, x, y, paint);

			return bitmap;
		} catch (Exception e) {
			Toast.makeText(getApplicationContext(), getString(R.string.error_fail_draw_text),
					Toast.LENGTH_SHORT).show();
			e.printStackTrace();
			return null;
		}

	}

	private static Bitmap drawableToBitmap(Drawable drawable) {
		if (drawable instanceof BitmapDrawable) {
			return ((BitmapDrawable) drawable).getBitmap();
		}

		int width = drawable.getIntrinsicWidth();
		width = width > 0 ? width : 1;
		int height = drawable.getIntrinsicHeight();
		height = height > 0 ? height : 1;

		Bitmap bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
		Canvas canvas = new Canvas(bitmap);
		drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
		drawable.draw(canvas);

		return bitmap;
	}
	
	private Bitmap overlay(Bitmap bmp1, Bitmap bmp2) {
        Bitmap bmOverlay = Bitmap.createBitmap(bmp1.getWidth(), bmp1.getHeight(), bmp1.getConfig());
        if (MyConfig.DEBUG_MODE) {
			Log.i("PAINT1", "w, h, conf: " + bmp1.getWidth() + " " + bmp1.getHeight() + " " + bmp1.getConfig());
		}
        Canvas canvas = new Canvas(bmOverlay);
        canvas.drawBitmap(bmp1, 0,0, null);
        // Set image on the middle height
        canvas.drawBitmap(bmp2, 0,(bmp1.getHeight() - bmp2.getHeight())/2, null);
        return bmOverlay;
    }
	
	private File createExternalStoragePublicPicture(Bitmap bmp) {
		File file = null;
		// Create a path where we will place our picture in the user's
		// public pictures directory. Note that you should be careful about
		// what you place here, since the user often manages these files.
		// For pictures and other media owned by the application, consider
		// Context.getExternalMediaDir()
		if (isExternalStorageReadable() && isExternalStorageWritable()) {
			
			File path = Environment
					.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
			if (path != null) {
				file = new File(path, EXPORT_FILE_NAME);
				if (myTracker != null) {
					myTracker.sendEvent("external_starage", "share_btn", "path", (long) 1);
				}
			} else {
				path = getExternalFilesDir(null);
				file = new File(path, EXPORT_FILE_NAME);
				if (myTracker != null) {
					myTracker.sendEvent("external_starage", "share_btn", "path", (long) 2);
				}
			}

			try {
				// Make sure the Pictures directory exists.
				path.mkdirs();

				// Very simple code to copy a picture from the application's
				// resource into the external file. Note that this code does
				// no error checking, and assumes the picture is small (does not
				// try to copy it in chunks). Note that if external storage is
				// not currently mounted this will silently fail.
				FileOutputStream outputStream;
				outputStream = new FileOutputStream(file);
				bmp.compress(Bitmap.CompressFormat.JPEG, JPEG_COMPRESSION, outputStream);
				outputStream.close();

				// Tell the media scanner about the new file so that it is
				// immediately available to the user.
				MediaScannerConnection.scanFile(this,
						new String[] { file.toString() }, null,
						new MediaScannerConnection.OnScanCompletedListener() {
							public void onScanCompleted(String path, Uri uri) {
								// Log.i("ExternalStorage", "Scanned " + path +
								// ":");
								// Log.i("ExternalStorage", "-> uri=" + uri);
							}
						});

			} catch (NullPointerException e) {
				// false indicates non-fatal exception.
				if (myTracker != null) {
					myTracker.sendException(e.getMessage(), true);
				}
				Toast.makeText(getApplicationContext(),getString(R.string.error_fail_write_file),
						Toast.LENGTH_SHORT).show();

			} catch (FileNotFoundException e) {
				if (myTracker != null) {
					myTracker.sendException(e.getMessage(), true);
				}
				Toast.makeText(getApplicationContext(), getString(R.string.error_fail_write_file),
						Toast.LENGTH_SHORT).show();
			} catch (IOException e) {
				if (myTracker != null) {
					myTracker.sendException(e.getMessage(), true);
				}
				// Unable to create file, likely because external storage is
				// not currently mounted.
				Toast.makeText(getApplicationContext(), getString(R.string.error_fail_write_file),
						Toast.LENGTH_SHORT).show();
				// Log.w("ExternalStorage", "Error writing file", e);
			}
		} else {
			if (myTracker != null) {
				myTracker.sendEvent("external_starage", "share_btn", "sdcard unavailable", (long) 1);
			}
			Toast.makeText(getApplicationContext(), getString(R.string.error_sd_card_unavailable),
					Toast.LENGTH_SHORT).show();
		}
		return file;
	}
	
	/* Checks if external storage is available for read and write */
	public boolean isExternalStorageWritable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state)) {
	        return true;
	    }
	    return false;
	}

	/* Checks if external storage is available to at least read */
	public boolean isExternalStorageReadable() {
	    String state = Environment.getExternalStorageState();
	    if (Environment.MEDIA_MOUNTED.equals(state) ||
	        Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
	        return true;
	    }
	    return false;
	}

}
